{
  "$schema": "https://raw.githubusercontent.com/ga4gh-beacon/beacon-framework-v2/main/requests/requestParameters.json",
  "g_variant": {
    "type": "object",
    "properties": {
      "assemblyId": {
        "$ref": "./requestParametersComponents.json#/definitions/Assembly"
      },
      "ids": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "datasetIds": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "referenceName": {
        "$ref": "./requestParametersComponents.json#/definitions/RefSeqId"
      },
      "start": {
        "description": "Precise or fuzzy start coordinate position(s), allele locus\n(0-based, inclusive).\n* `start` only:\n  - for single positions, e.g. the start of a specified sequence\n  alteration where the size is given through the specified\n  `alternateBases`\n  - typical use are queries for SNV and small InDels\n  - the use of `start` without an `end` parameter requires the use\n  of `alternateBases`\n\n* `start` and `end`:\n  - for searching any variant falling fully or partially within the\n  range between `start` and `end` (a.k.a. \"range query\")\n  - additional use of `variantType` OR `alternateBases` can limit the\n  scope of the query\n  - by convention, partial overlaps of variants with the indicated\n  genomic range are accepted; for specific overlap requirements the\n  4-parammeter \"Bracket Queries\" should be employed\n* use of 2 values in both `start` and `end` for constructing a\n\"Bracket Query\":\n  - can be used to match any contiguous genomic interval, e.g. for\n  querying imprecise positions\n    * identifying all structural variants starting between `start[0]`\n    and `start[1]`, and ending between `end[0]` <-> `end[1]`\n    * single or double sided precise matches can be achieved by\n    setting `start[1]=start[0]+1` and `end[1]=end[0]+1`",
        "type": "array",
        "items": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "minItems": 1,
        "maxItems": 2
      },
      "end": {
        "description": "Precise or bracketing the end of the variants of interest:\n* (0-based, exclusive) - see `start`\n* for bracket queries, provide 2 values (e.g. [111,222]).",
        "type": "array",
        "items": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "minItems": 0,
        "maxItems": 2
      },
      "referenceBases": {
        "$ref": "./requestParametersComponents.json#/definitions/ReferenceBases"
      },
      "alternateBases": {
        "$ref": "./requestParametersComponents.json#/definitions/AlternateBases"
      },
      "variantType": {
        "description": "The `variantType` is used to query variants which are not defined\nthrough a sequence of one or more bases using the `alternateBases`\nparameter. Examples here are e.g. structural variants:\n* DUP\n  - increased allelic count of material from the genomic region\n  between `start` and `end` positions\n  - no assumption about the placement of the additional sequences is\n  being made (i.e. no _in situ_ requirement as tandem duplications)\n* DEL: deletion of sequence following `start`\n* BND: breakend, i.e. termination of the allele at position\n      `start` or in the `startMin` => `startMax` interval, or fusion\n      of the sequence to distant partner\nEither `alternateBases` or `variantType` is required, with the\nexception of range queries (single `start` and `end` parameters).",
        "type": "string"
      },
      "variantMinLength": {
        "description": "Minimum length in bases of a genomic variant. This is an optional parameter without prescribed use. While a length is commonly available for structural variants such as copy number variations, it is recommended that length based queries should also be supported for variants with indicated referenceBases and alternateBases, to enable length-specific wildcard queries.",
        "type": "integer",
        "format": "int64",
        "minimum": 0
      },
      "variantMaxLength": {
        "description": "Maximum length in bases of a genomic variant. This is an optional parameter without prescribed use. While a length is commonly available for structural variants such as copy number variations, it is recommended that length based queries should also be supported for variants with indicated referenceBases and alternateBases, to enable length-specific wildcard queries.",
        "type": "integer",
        "format": "int64",
        "minimum": 1
      },
      "mateName": {
        "$ref": "./requestParametersComponents.json#/definitions/RefSeqId"
      },
      "geneId": {
        "description": "Gene identifier, it is strongly suggested to use a symbol following the HGNC (https://www.genenames.org) nomenclature.",
        "type": "string",
        "examples": ["BRAF", "SCN5A"]
      },
      "aminoacidChange": {
        "description": "Aminoacid alteration of interest. Format 1 letter ",
        "type": "string",
        "examples": ["V600E", "M734V"]
      },
      "genomicAlleleShortForm": {
        "description": "HGVSId descriptor",
        "type": "string",
        "examples": ["NM_004006.2:c.4375C>T"]
      }
    }
  }
}
